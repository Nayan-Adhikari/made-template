pipeline TreesPipeline {

  TreesExtractor
    -> TreesTextFileInterpreter;

  TreesTextFileInterpreter
    -> TreesCSVInterpreter
    -> TreesFilteredTableInterpreter
    -> TreeRangeTransformer  
    -> TreesLoader;

  block TreesExtractor oftype HttpExtractor {
    url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
  }

  block TreesTextFileInterpreter oftype TextFileInterpreter { }

  block TreesCSVInterpreter oftype CSVInterpreter {
    delimiter: ";"; 
  } 


  block TreesFilteredTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "lfd_nr" oftype integer,              
      "stadtteil" oftype TreesColumnStadtteil,  
      "standort" oftype text,                
      "baumart_botanisch" oftype text,    
      "id" oftype TreesColumnId,          
      "baumfamilie" oftype text           
    ];
  }

 
block TreeRangeTransformer oftype TableTransformer {
   inputColumns: [
      "id"
    ];
    outputColumn: "id";
    uses: ReformateId;
}

// we can use  this method for reformate  cell value [ it not used now]

transform ReformateId {
    from data oftype text;
    to objdata oftype text;

    objdata:  data;
}
 
 




  block TreesLoader oftype SQLiteLoader {
    table: "trees";
    file: "./trees.sqlite";
  }
}






valuetype TreesColumnStadtteil oftype text { 
  constraints: [
    onlySpecificTextAllow
  ];
}

valuetype TreesColumnId oftype text { 
  constraints: [
    reformateThreeDigitValue
  ];
}

 
constraint onlySpecificTextAllow on text: value matches /^Vogelsang.*/;

constraint reformateThreeDigitValue on text: value matches /\b\d{1,3}\.\d+,\s?\d{1,3}\.\d+\b/;
